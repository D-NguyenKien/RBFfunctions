function [W,Q] = quadrature( quadorder, qt, sdim )

% quarorder: order (max is 16 for GAUSS, 3 for TRIANGULAR, 12 for TRIANGLE )
% qt: 'GAUSS' or 'TRIANGULAR'
% sdim: dimension (= 1 or 2 or 3 for GAUSS, 
%                             2 or 3 for TRIANGLE (means TRIANGULAR 2-dim) or TRIANGULAR)
%
% ===================================
% Modified by D. Nguyen Kien
%           Civil Engineering, Tongji University
%           kiendung.nguyen@tongji.edu.cn
%
% Based on codes of Jack Chessa,
%            Department of Mechanical Engineering 
%            Northwestern University
%            j-chessa@northwestern.edu
%====================================





%====================================
%====================================
  if ( strcmp(qt,'GAUSS') == 1 ) 

    if ( quadorder > 16 )  % check for valid quadrature order
      disp('Order of quadrature too high for Gaussian Quadrature (>16)'); 
      quadorder =16;
    end
    
    quadpoint=zeros(quadorder^sdim ,sdim);
    quadweight=zeros(quadorder^sdim,1);
  
    r1pt=zeros(quadorder,1); r1wt=zeros(quadorder,1);

    switch ( quadorder ) 
      case 1
        r1pt(1) = 0.000000000000000;
        
        r1wt(1) = 2.000000000000000;

      case 2
        r1pt(1) = 0.577350269189626;
        r1pt(2) =-0.577350269189626;

        r1wt(1) = 1.000000000000000; 
        r1wt(2) = 1.000000000000000;         

      case 3
        r1pt(1) = 0.774596669241483;
        r1pt(2) =-0.774596669241483;
        r1pt(3) = 0.000000000000000;

        r1wt(1) = 0.555555555555556;
        r1wt(2) = 0.555555555555556; 
        r1wt(3) = 0.888888888888889;   

      case 4
        r1pt(1) = 0.861134311594053;
        r1pt(2) =-0.861134311594053;
        r1pt(3) = 0.339981043584856;
        r1pt(4) =-0.339981043584856;

        r1wt(1) = 0.347854845137454;
        r1wt(2) = 0.347854845137454; 
        r1wt(3) = 0.652145154862546;
        r1wt(4) = 0.652145154862546;  

      case 5
        r1pt(1) = 0.906179845938664;
        r1pt(2) =-0.906179845938664;
        r1pt(3) = 0.538469310105683;
        r1pt(4) =-0.538469310105683;
        r1pt(5) = 0.000000000000000;

        r1wt(1) = 0.236926885056189;
        r1wt(2) = 0.236926885056189;
        r1wt(3) = 0.478628670499366;
        r1wt(4) = 0.478628670499366;  
        r1wt(5) = 0.568888888888889;  

      case 6
        r1pt(1) = 0.932469514203152;
        r1pt(2) =-0.932469514203152;
        r1pt(3) = 0.661209386466265;
        r1pt(4) =-0.661209386466265;
        r1pt(5) = 0.238619186003152;
        r1pt(6) =-0.238619186003152;

        r1wt(1) = 0.171324492379170;
        r1wt(2) = 0.171324492379170;
        r1wt(3) = 0.360761573048139;
        r1wt(4) = 0.360761573048139;   
        r1wt(5) = 0.467913934572691; 
        r1wt(6) = 0.467913934572691;
	
      case 7
        r1pt(1) =  0.949107912342759;
        r1pt(2) = -0.949107912342759;
        r1pt(3) =  0.741531185599394;
        r1pt(4) = -0.741531185599394;
        r1pt(5) =  0.405845151377397;
        r1pt(6) = -0.405845151377397;
        r1pt(7) =  0.000000000000000;

        r1wt(1) = 0.129484966168870;
        r1wt(2) = 0.129484966168870;
        r1wt(3) = 0.279705391489277;
        r1wt(4) = 0.279705391489277;
        r1wt(5) = 0.381830050505119;
        r1wt(6) = 0.381830050505119;
        r1wt(7) = 0.417959183673469;

      case 8
        r1pt(1) =  0.960289856497536;
        r1pt(2) = -0.960289856497536;
        r1pt(3) =  0.796666477413627;
        r1pt(4) = -0.796666477413627;
        r1pt(5) =  0.525532409916329;
        r1pt(6) = -0.525532409916329;
        r1pt(7) =  0.183434642495650;
        r1pt(8) = -0.183434642495650;

        r1wt(1) = 0.101228536290376;
        r1wt(2) = 0.101228536290376;
        r1wt(3) = 0.222381034453374;
        r1wt(4) = 0.222381034453374;
        r1wt(5) = 0.313706645877887;
        r1wt(6) = 0.313706645877887;
        r1wt(7) = 0.362683783378362;
        r1wt(8) = 0.362683783378362;
        
        case 9
            r1pt(1)  =  0.968160239507626;
            r1pt(2)  = -0.968160239507626;
            r1pt(3)  =  0.836031107326635;
            r1pt(4)  = -0.836031107326635;
            r1pt(5)  =  0.613371432700590;
            r1pt(6)  = -0.613371432700590;
            r1pt(7)  =  0.324253423403808;
            r1pt(8)  = -0.324253423403808;
            r1pt(9)  = 0.000000000000000;
            
            r1wt(1)  =  0.081274388361574;
            r1wt(2)  =  0.081274388361574;
            r1wt(3)  =  0.180648160694857;
            r1wt(4)  =  0.180648160694857;
            r1wt(5)  =  0.260610696402935;
            r1wt(6)  =  0.260610696402935;
            r1wt(7)  =  0.312347077040002;
            r1wt(8)  =  0.312347077040002;
            r1wt(9)  =  0.330239355001259;
            
        case 10
            r1pt(1)  =  0.973906528517171;
            r1pt(2)  = -0.973906528517171;
            r1pt(3)  =  0.865063366688984;
            r1pt(4)  = -0.865063366688984;
            r1pt(5)  =  0.679409568299024;
            r1pt(6)  = -0.679409568299024;
            r1pt(7)  =  0.433395394129247;
            r1pt(8)  = -0.433395394129247;
            r1pt(9)  =  0.148874338981631;
            r1pt(10) = -0.148874338981631;
            
            r1wt(1)  =  0.066671344308688;
            r1wt(2)  =  0.066671344308688;
            r1wt(3)  =  0.149451349150580;
            r1wt(4)  =  0.149451349150580;
            r1wt(5)  =  0.219086362515982;
            r1wt(6)  =  0.219086362515982;
            r1wt(7)  =  0.269266719309996;
            r1wt(8)  =  0.269266719309996;
            r1wt(9)  = 0.295524224714752;
            r1wt(10) = 0.295524224714752;
            
        case 11
            r1pt(1)  =  0.978228658146056;
            r1pt(2)  = -0.978228658146056;
            r1pt(3)  =  0.887062599768095;
            r1pt(4)  = -0.887062599768095;
            r1pt(5)  =  0.730152005574049;
            r1pt(6)  = -0.730152005574049;
            r1pt(7)  =  0.519096129206811;
            r1pt(8)  = -0.519096129206811;
            r1pt(9)  =  0.269543155952344;
            r1pt(10) = -0.269543155952344;
            r1pt(11) = 0.000000000000000;
            
            r1wt(1)  =  0.055668567116173;
            r1wt(2)  =  0.055668567116173;
            r1wt(3)  =  0.125580369464904;
            r1wt(4)  =  0.125580369464904;
            r1wt(5)  =  0.186290210927734;
            r1wt(6)  =  0.186290210927734;
            r1wt(7)  =  0.233193764591990;
            r1wt(8)  =  0.233193764591990;
            r1wt(9)  =  0.262804544510246;
            r1wt(10) = 0.262804544510246;
            r1wt(11) = 0.272925086777900;
          
            
        case 12    
            r1pt(1)  =  0.9815606342467192;
            r1pt(2)  = -0.9815606342467192;
            r1pt(3)  =  0.904117256370474;
            r1pt(4)  = -0.904117256370474;
            r1pt(5)  =  0.769902674194304;
            r1pt(6)  = -0.769902674194304;
            r1pt(7)  =  0.587317954286617;
            r1pt(8)  = -0.587317954286617;
            r1pt(9)  =  0.367831498998180;
            r1pt(10) = -0.367831498998180;
            r1pt(11) = 0.125233408511468;
            r1pt(12) = -0.125233408511468;
            
            r1wt(1)  =  0.047175336386511;
            r1wt(2)  =  0.047175336386511;
            r1wt(3)  =  0.106939325995318;
            r1wt(4)  =  0.106939325995318;
            r1wt(5)  =  0.160078328543346;
            r1wt(6)  =  0.160078328543346;
            r1wt(7)  =  0.203167426723065;
            r1wt(8)  =  0.203167426723065;
            r1wt(9)  =  0.233492536538354;
            r1wt(10) = 0.233492536538354;
            r1wt(11) = 0.249147045813402;
            r1wt(12) = 0.249147045813402;

            
        case 13
            r1pt(1)  =  0.984183054718588;
            r1pt(2)  = -0.984183054718588;
            r1pt(3)  =  0.917598399222977;
            r1pt(4)  = -0.917598399222977;
            r1pt(5)  =  0.801578090733309;
            r1pt(6)  = -0.801578090733309;
            r1pt(7)  =  0.642349339440340;
            r1pt(8)  = -0.642349339440340;
            r1pt(9)  =  0.448492751036446;
            r1pt(10) = -0.448492751036446;
            r1pt(11) = 0.230458315955134;
            r1pt(12) = -0.230458315955134;
            r1pt(13) = 0.000000000000000;
            
            r1wt(1)  =  0.040484004765315;
            r1wt(2)  =  0.040484004765315;
            r1wt(3)  =  0.092121499837728;
            r1wt(4)  =  0.092121499837728;
            r1wt(5)  =  0.138873510219787;
            r1wt(6)  =  0.138873510219787;
            r1wt(7)  =  0.178145980761945;
            r1wt(8)  =  0.178145980761945;
            r1wt(9)  =  0.207816047536888;
            r1wt(10) =  0.207816047536888;
            r1wt(11) =  0.226283180262897;
            r1wt(12) =  0.226283180262897;
            r1wt(13) =  0.232551553230873;
  
         
        case 14
            r1pt(1)  =  0.986283808696812;
            r1pt(2)  = -0.986283808696812;
            r1pt(3)  =  0.928434883663573;
            r1pt(4)  = -0.928434883663573;
            r1pt(5)  =  0.827201315069764;
            r1pt(6)  = -0.827201315069764;
            r1pt(7)  =  0.687292904811685;
            r1pt(8)  = -0.687292904811685;
            r1pt(9)  =  0.515248636358154;
            r1pt(10) = -0.515248636358154;
            r1pt(11) =  0.319112368927889;
            r1pt(12) = -0.319112368927889;
            r1pt(13) =  0.108054948707343;
            r1pt(14) = -0.108054948707343;
            
            r1wt(1)  =  0.035119460331751;
            r1wt(2)  =  0.035119460331751;
            r1wt(3)  =  0.080158087159760;
            r1wt(4)  =  0.080158087159760;
            r1wt(5)  =  0.121518570687903;
            r1wt(6)  =  0.121518570687903;
            r1wt(7)  =  0.157203167158193;
            r1wt(8)  =  0.157203167158193;
            r1wt(9)  =  0.185538397477937;
            r1wt(10) =  0.185538397477937;
            r1wt(11) = 0.205198463721295;
            r1wt(12) = 0.205198463721295;
            r1wt(13) = 0.215263853463157;
            r1wt(14) = 0.215263853463157;

            
        case 15    
            r1pt(1)  =  0.987992518020485;
            r1pt(2)  = -0.987992518020485; 
            r1pt(3)  =  0.937273392400705;
            r1pt(4)  = -0.937273392400705;
            r1pt(5)  =  0.848206583410427;
            r1pt(6)  = -0.848206583410427;
            r1pt(7)  =  0.724417731360170;
            r1pt(8)  = -0.724417731360170;
            r1pt(9)  =  0.570972172608538;
            r1pt(10) = -0.570972172608538;
            r1pt(11) =  0.394151347077563;
            r1pt(12) = -0.394151347077563;
            r1pt(13) =  0.201194093997434;
            r1pt(14) = -0.201194093997434;
            r1pt(15) =  0.000000000000000;
            
            r1wt(1)  =  0.030753241996117;
            r1wt(2)  =  0.030753241996117;
            r1wt(3)  =  0.070366047488108;
            r1wt(4)  =  0.070366047488108;
            r1wt(5)  =  0.107159220467171;
            r1wt(6)  =  0.107159220467171;
            r1wt(7)  =  0.139570677926154;
            r1wt(8)  =  0.139570677926154;
            r1wt(9)  = 0.166269205816993;
            r1wt(10) = 0.166269205816993;
            r1wt(11) = 0.1861610000155622;
            r1wt(12) = 0.1861610000155622;
            r1wt(13) = 0.198431485327111;
            r1wt(14) = 0.198431485327111;
            r1wt(15) = 0.202578241925561;
   
            
        case 16    
            r1pt(1)  =  0.989400934991649;
            r1pt(2)  = -0.989400934991649;
            r1pt(3)  =  0.944575023073232;
            r1pt(4)  = -0.944575023073232;
            r1pt(5)  =  0.865631202387831;
            r1pt(6)  = -0.865631202387831;
            r1pt(7)  =  0.755404408355003;
            r1pt(8)  = -0.755404408355003;
            r1pt(9)  =  0.617876244402643;
            r1pt(10) = -0.617876244402643;
            r1pt(11) =  0.458016777657227;
            r1pt(12) = -0.458016777657227;
            r1pt(13) =  0.281603550779258;
            r1pt(14) = -0.281603550779258;
            r1pt(15) =  0.095012509837637;
            r1pt(16) = -0.095012509837637;
            
            r1wt(1)  =  0.027152459411754;
            r1wt(2)  =  0.027152459411754;
            r1wt(3)  =  0.062253523938647;
            r1wt(4)  =  0.062253523938647;
            r1wt(5)  =  0.095158511682492;
            r1wt(6)  =  0.095158511682492;
            r1wt(7)  =  0.124628971255533;
            r1wt(8)  =  0.124628971255533;
            r1wt(9)  =  0.149595988816576;
            r1wt(10) = 0.149595988816576;
            r1wt(11) = 0.169156519395002;
            r1wt(12) = 0.169156519395002;
            r1wt(13) = 0.182603415044923;
            r1wt(14) = 0.182603415044923;
            r1wt(15) = 0.189450610455068;
            r1wt(16) = 0.189450610455068;
            
      otherwise
        disp('Order of quadrature to high for Gaussian Quadrature'); 
	
    end  % end of quadorder switch

    n=1;
     
    if ( sdim == 1 ) 
      for i = 1:quadorder
        quadpoint(n,:) = [ r1pt(i) ];           
        quadweight(n) = r1wt(i); 
        n = n+1;
      end
    
    elseif ( sdim == 2 ) 
      for i = 1:quadorder
        for j = 1:quadorder
          quadpoint(n,:) = [ r1pt(i), r1pt(j)];           
          quadweight(n) = r1wt(i)*r1wt(j); 
          n = n+1;
        end
      end
  
    else % sdim == 3
      for i = 1:quadorder
        for j = 1:quadorder
          for k = 1:quadorder
            quadpoint(n,:) = [ r1pt(i), r1pt(j), r1pt(k) ];           
            quadweight(n) = r1wt(i)*r1wt(j)*r1wt(k); 
            n = n+1;
          end
	end
      end
      
    end
    
    Q=quadpoint;
    W=quadweight;
  % END OF GAUSSIAN QUADRATURE DEFINITION
  
  
  
%====================================
%====================================
  elseif ( strcmp(qt,'TRIANGULAR') == 1 ) 
    
    if ( sdim == 3 )  %%% TETRAHEDRA
      
      if ( quadorder ~= 1 &  quadorder ~= 2 &  quadorder ~= 3  ) 
        % check for valid quadrature order
        disp('Incorect quadrature order for triangular quadrature');
        quadorder = 1;
      end
      
      if  ( quadorder == 1 )
        quadpoint = [ 0.25 0.25 0.25 ];
        quadweight = 1;
        
      elseif ( quadorder == 2 ) 
        quadpoint = [ 0.58541020  0.13819660  0.13819660;
                      0.13819660  0.58541020  0.13819660;
                      0.13819660  0.13819660  0.58541020;
                      0.13819660  0.13819660  0.13819660];
        quadweight = [1; 1; 1; 1]/4;
        
      elseif ( quadorder == 3 ) 
        quadpoint = [ 0.25  0.25  0.25;
                      1/2   1/6   1/6;
                      1/6   1/2   1/6;
                      1/6   1/6   1/2;
                      1/6   1/6   1/6];
        quadweight = [-4/5 9/20 9/20 9/20 9/20]';
        
      end
      
      Q=quadpoint;
      W=quadweight/6;
         
      
%====================================
%====================================
    else  %%% TRIANGLES
      
      if ( quadorder > 12 ) % check for valid quadrature order
        disp('Quadrature order too high for triangular quadrature (>12)');
        quadorder = 12;
      end
      
      if ( quadorder == 1 )   % set quad points and quadweights  % order =1
        quadpoint = [ 0.3333333333333, 0.3333333333333 ];
        quadweight = 1;
        
      elseif ( quadorder == 2 )   % order = 2
        quadpoint = zeros( 3, 2 );
        quadweight = zeros( 3, 1 );
        
        quadpoint(1,:) = [ 0.1666666666667, 0.1666666666667 ];
        quadpoint(2,:) = [ 0.6666666666667, 0.1666666666667 ];
        quadpoint(3,:) = [ 0.1666666666667, 0.6666666666667 ]; 
        
        quadweight(1) = 0.3333333333333; 
        quadweight(2) = 0.3333333333333; 
        quadweight(3) = 0.3333333333333;   
        
      elseif  (quadorder >2 ) &&  (quadorder <= 5 )  % order =5
        quadpoint = zeros( 7, 2 );
        quadweight = zeros( 7, 1 );
        
        quadpoint(1,:) = [ 0.1012865073235, 0.1012865073235 ];
        quadpoint(2,:) = [ 0.7974269853531, 0.1012865073235 ];
        quadpoint(3,:) = [ 0.1012865073235, 0.7974269853531 ]; 
        quadpoint(4,:) = [ 0.4701420641051, 0.0597158717898 ];
        quadpoint(5,:) = [ 0.4701420641051, 0.4701420641051 ];
        quadpoint(6,:) = [ 0.0597158717898, 0.4701420641051 ]; 
        quadpoint(7,:) = [ 0.3333333333333, 0.3333333333333 ];
        
        quadweight(1) = 0.1259391805448; 
        quadweight(2) = 0.1259391805448; 
        quadweight(3) = 0.1259391805448; 
        quadweight(4) = 0.1323941527885;
        quadweight(5) = 0.1323941527885;
        quadweight(6) = 0.1323941527885;
        quadweight(7) = 0.2250000000000;  
        
      elseif (quadorder >5 ) &&  (quadorder <= 7 )  % order = 7
        quadpoint = zeros( 13, 2 );
        quadweight = zeros( 13, 1 );
        
        quadpoint(1 ,:) = [ 0.0651301029022, 0.0651301029022 ];
        quadpoint(2 ,:) = [ 0.8697397941956, 0.0651301029022 ];
        quadpoint(3 ,:) = [ 0.0651301029022, 0.8697397941956 ];
        quadpoint(4 ,:) = [ 0.3128654960049, 0.0486903154253 ];
        quadpoint(5 ,:) = [ 0.6384441885698, 0.3128654960049 ];
        quadpoint(6 ,:) = [ 0.0486903154253, 0.6384441885698 ];
        quadpoint(7 ,:) = [ 0.6384441885698, 0.0486903154253 ];
        quadpoint(8 ,:) = [ 0.3128654960049, 0.6384441885698 ];
        quadpoint(9 ,:) = [ 0.0486903154253, 0.3128654960049 ];
        quadpoint(10,:) = [ 0.2603459660790, 0.2603459660790 ];
        quadpoint(11,:) = [ 0.4793080678419, 0.2603459660790 ];
        quadpoint(12,:) = [ 0.2603459660790, 0.4793080678419 ];
        quadpoint(13,:) = [ 0.3333333333333, 0.3333333333333 ];
        
        quadweight(1 ) = 0.0533472356088;
        quadweight(2 ) = 0.0533472356088; 
        quadweight(3 ) = 0.0533472356088;
        quadweight(4 ) = 0.0771137608903;
        quadweight(5 ) = 0.0771137608903;
        quadweight(6 ) = 0.0771137608903;
        quadweight(7 ) = 0.0771137608903;
        quadweight(8 ) = 0.0771137608903;
        quadweight(9 ) = 0.0771137608903;
        quadweight(10) = 0.1756152576332; 
        quadweight(11) = 0.1756152576332; 
        quadweight(12) = 0.1756152576332;
        quadweight(13) =-0.1495700444677; 
        
      elseif (quadorder == 8)     % order = 8
          quadpoint = zeros( 16, 2 );
          quadweight = zeros( 16, 1 );
          
          quadpoint(1 ,:) = [0.33333333333333  0.33333333333333];
          quadpoint(2 ,:) = [0.45929258829272  0.45929258829272 ];
          quadpoint(3 ,:) = [0.45929258829272  0.08141482341455 ];
          quadpoint(4 ,:) = [0.08141482341455 0.45929258829272 ];
          quadpoint(5 ,:) = [0.17056930775176  0.17056930775176 ];
          quadpoint(6 ,:) = [0.17056930775176    0.65886138449648 ];
          quadpoint(7 ,:) = [0.65886138449648    0.17056930775176 ];
          quadpoint(8 ,:) = [0.05054722831703    0.05054722831703 ];
          quadpoint(9 ,:) = [0.05054722831703    0.89890554336594 ];
          quadpoint(10 ,:) = [0.89890554336594    0.05054722831703 ];
          quadpoint(11 ,:) = [0.26311282963464    0.72849239295540 ];
          quadpoint(12 ,:) = [0.72849239295540    0.00839477740996 ];
          quadpoint(13 ,:) = [0.00839477740996    0.26311282963464];
          quadpoint(14 ,:) = [0.72849239295540    0.26311282963464 ];
          quadpoint(15 ,:) = [0.26311282963464    0.00839477740996 ];
          quadpoint(16 ,:) = [ 0.00839477740996    0.72849239295540 ];
          
          quadweight(1 ) = 0.14431560767779 ;
          quadweight(2 ) = 0.09509163426728 ;
          quadweight(3 ) = 0.09509163426728 ;
          quadweight(4 ) =  0.09509163426728 ;
          quadweight(5 ) = 0.10321737053472 ;
          quadweight(6 ) = 0.10321737053472 ;
          quadweight(7 ) = 0.10321737053472 ;
          quadweight(8 ) = 0.03245849762320 ;
          quadweight(9 ) =  0.03245849762320;
          quadweight(10 ) = 0.03245849762320 ;
          quadweight(11 ) = 0.02723031417443 ;
          quadweight(12 ) = 0.02723031417443 ;
          quadweight(13 ) = 0.02723031417443 ;
          quadweight(14 ) = 0.02723031417443 ;
          quadweight(15 ) = 0.02723031417443 ;
          quadweight(16 ) = 0.02723031417443 ;
               
      elseif  (quadorder >8 ) &&  (quadorder <= 10 )  % order = 10
          
         xw=[0.33333333333333    0.33333333333333    0.09081799038275;
         0.48557763338366    0.48557763338366    0.03672595775647;
         0.48557763338366    0.02884473323269    0.03672595775647;
         0.02884473323269    0.48557763338366    0.03672595775647;
         0.10948157548504    0.10948157548504    0.04532105943553;
         0.10948157548504    0.78103684902993    0.04532105943553;
         0.78103684902993    0.10948157548504    0.04532105943553;
         0.30793983876412    0.55035294182100    0.07275791684542;
         0.55035294182100    0.14170721941488    0.07275791684542;
         0.14170721941488    0.30793983876412    0.07275791684542;
         0.55035294182100    0.30793983876412    0.07275791684542;
         0.30793983876412    0.14170721941488    0.07275791684542;
         0.14170721941488    0.55035294182100    0.07275791684542;
         0.24667256063990    0.72832390459741    0.02832724253106;
         0.72832390459741    0.02500353476269    0.02832724253106;
         0.02500353476269    0.24667256063990    0.02832724253106;
         0.72832390459741    0.24667256063990    0.02832724253106;
         0.24667256063990    0.02500353476269    0.02832724253106;
         0.02500353476269    0.72832390459741    0.02832724253106;
         0.06680325101220    0.92365593358750    0.00942166696373;
         0.92365593358750    0.00954081540030    0.00942166696373;
         0.00954081540030    0.06680325101220    0.00942166696373;
         0.92365593358750    0.06680325101220    0.00942166696373;
         0.06680325101220    0.00954081540030    0.00942166696373;
         0.00954081540030    0.92365593358750    0.00942166696373];
         
         quadpoint = zeros(size(xw,1), 2 );
         quadweight = zeros(size(xw,1), 1 );
         for i=1 : size(xw,1)
            quadpoint(i,:) = xw(i, 1:2);
            quadweight(i) = xw(i,3);
         end
          
         
      elseif  (quadorder >10 ) &&  (quadorder <= 12 )  % order = 12
          
         xw=[0.48821738977381    0.48821738977381    0.02573106644045;
         0.48821738977381    0.02356522045239    0.02573106644045;
         0.02356522045239    0.48821738977381    0.02573106644045;
         0.43972439229446    0.43972439229446    0.04369254453804;
         0.43972439229446    0.12055121541108    0.04369254453804;
         0.12055121541108    0.43972439229446    0.04369254453804;
         0.27121038501212    0.27121038501212    0.06285822421789;
         0.27121038501212    0.45757922997577    0.06285822421789;
         0.45757922997577    0.27121038501212    0.06285822421789;
         0.12757614554159    0.12757614554159    0.03479611293071;
         0.12757614554159    0.74484770891683    0.03479611293071;
         0.74484770891683    0.12757614554159    0.03479611293071;
         0.02131735045321    0.02131735045321    0.00616626105156;
         0.02131735045321    0.95736529909358    0.00616626105156;
         0.95736529909358    0.02131735045321    0.00616626105156;
         0.27571326968551    0.60894323577979    0.04037155776638;
         0.60894323577979    0.11534349453470    0.04037155776638;
         0.11534349453470    0.27571326968551    0.04037155776638;
         0.60894323577979    0.27571326968551    0.04037155776638;
         0.27571326968551    0.11534349453470    0.04037155776638;
         0.11534349453470    0.60894323577979    0.04037155776638;
         0.28132558098994    0.69583608678780    0.02235677320230;
         0.69583608678780    0.02283833222226    0.02235677320230;
         0.02283833222226    0.28132558098994    0.02235677320230;
         0.69583608678780    0.28132558098994    0.02235677320230;
         0.28132558098994    0.02283833222226    0.02235677320230;
         0.02283833222226    0.69583608678780    0.02235677320230;
         0.11625191590760    0.85801403354407    0.01731623110866;
         0.85801403354407    0.02573405054833    0.01731623110866;
         0.02573405054833    0.11625191590760    0.01731623110866;
         0.85801403354407    0.11625191590760    0.01731623110866;
         0.11625191590760    0.02573405054833    0.01731623110866;
         0.02573405054833    0.85801403354407    0.01731623110866];
         
         
         quadpoint = zeros(size(xw,1), 2 );
         quadweight = zeros(size(xw,1), 1 );
         for i=1 : size(xw,1)
            quadpoint(i,:) = xw(i, 1:2);
            quadweight(i) = xw(i,3);
         end
          
      end % end if for quadorder
      
      Q=quadpoint;
      W=quadweight/2;   % ATTENTION ATTENTION WHY DIVIDE TO 2????? --Ans: see formula
    end % end if for sdim
    % end of TRIANGULAR initialization
    
  end  % END OF FUNCTION
